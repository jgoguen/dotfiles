#!/usr/bin/python3
# vim: set noexpandtab tabstop=2 shiftwidth=2 autoindent:
# vim: set foldmarker=[[[,]]] foldmethod=marker foldlevel=0:
# Do not edit this file directly! It is managed by chezmoi.

import argparse
import glob
import hashlib
import logging
import os
import platform
import re
import shlex
import subprocess
import sys

from typing import cast
from urllib.request import urlopen

try:
    from packaging import version
except ImportError:
    print("packaging module not found, install python3-packaging")
    raise


class Args(argparse.Namespace):
    debug = False
    prefix = os.path.dirname(
        os.environ.get("XDG_DATA_HOME", os.path.expanduser("~/.local/share"))
    )
    share_dir = os.path.basename(os.environ.get("XDG_DATA_HOME", "share"))
    bin_dir = "bin"
    no_update_lib = False
    version: str | None = None


parser = argparse.ArgumentParser()
_ = parser.add_argument(
    "-d",
    "--debug",
    action="store_true",
    help="Print debug messages",
)
_ = parser.add_argument(
    "-p",
    "--prefix",
    default=os.path.dirname(
        os.environ.get("XDG_DATA_HOME", os.path.expanduser("~/.local/share"))
    ),
    help="Base directory for all calibre install files (default: %(default)s)",
)
_ = parser.add_argument(
    "-s",
    "--share-dir",
    default=os.path.basename(os.environ.get("XDG_DATA_HOME", "share")),
    help="Where to store shared data, relative to --prefix (default: " + "%(default)s)",
)
_ = parser.add_argument(
    "-b",
    "--bin-dir",
    default="bin",
    help="Where to link binaries, relative to --prefix (default: %(default)s)",
)
_ = parser.add_argument(
    "--no-update-lib",
    action="store_true",
    help=argparse.SUPPRESS,
)
_ = parser.add_argument(
    "--version",
    help="Install a specific calibre version",
)

opts = parser.parse_args(namespace=Args())


logging.basicConfig(
    format="%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s",
    level=logging.DEBUG if opts.debug else logging.INFO,
)

PREFIX_DIR = os.path.abspath(opts.prefix)
SHARE_DIR = os.path.join(PREFIX_DIR, opts.share_dir, "calibre")
BIN_DIR = os.path.join(PREFIX_DIR, opts.bin_dir)

logging.debug(f"Calibre shared data directory: {SHARE_DIR}")
logging.debug(f"Calibre bin directory: {BIN_DIR}")

LIB_ARCH = "64" if platform.architecture()[0] == "64bit" else ""
USER_PYTHON_DIR = os.path.expanduser(
    f"{PREFIX_DIR}/lib{LIB_ARCH}/python{sys.version_info.major}"
    + f".{sys.version_info.minor}"
)

for d in (SHARE_DIR, BIN_DIR):
    if not os.path.isdir(d):
        logging.info(f"Creating calibre directory {d}")
        os.makedirs(d, 0o0700)

if USER_PYTHON_DIR not in sys.path:
    sys.path.insert(1, USER_PYTHON_DIR)

if not opts.no_update_lib:
    CALIBRE_LIB_DIR = os.path.join(USER_PYTHON_DIR, "calibre")
    CALIBRE_INSTALLER_LIB = os.path.join(CALIBRE_LIB_DIR, "installer.py")

    if not os.path.isdir(CALIBRE_LIB_DIR):
        os.makedirs(CALIBRE_LIB_DIR, 0o0700)

    if os.path.isfile(CALIBRE_INSTALLER_LIB):
        with open(CALIBRE_INSTALLER_LIB, "r") as f:
            lib_hash = hashlib.sha256(f.read().encode("UTF-8")).hexdigest()
    else:
        lib_hash = ""

    lib_data: bytes = urlopen(
        "https://raw.githubusercontent.com/kovidgoyal/calibre/master/"
        + "setup/linux-installer.py"
    ).read()

    new_hash = hashlib.sha256(lib_data).hexdigest()
    if lib_hash != new_hash:
        with open(CALIBRE_INSTALLER_LIB, "w") as f:
            _ = f.write(lib_data.decode("UTF-8"))
        os.execv(sys.argv[0], sys.argv[1:] + ["--no-update-lib"])

latest_version = opts.version
calibre_bin = os.path.join(SHARE_DIR, "calibre")

if os.path.exists(calibre_bin):
    if latest_version is None:
        proc = subprocess.run(
            [calibre_bin, "--version"],
            stdout=subprocess.PIPE,
        )
        logging.debug(f"{calibre_bin} --version: {proc.stdout.strip()}")
        local_match = re.search(
            r"^.+\(.+ ([\d\.]+)\)$",
            proc.stdout.strip().decode("UTF-8"),
        )
        if local_match:
            calibre_version = version.parse(local_match.group(1))
            logging.debug(f"calibre_version={calibre_version}")
            resp = urlopen(
                "https://github.com/kovidgoyal/calibre/releases/latest",
            )
            logging.debug(f"URL: {resp.geturl()}")
            remote_match = re.search(
                r"^.+\/releases\/tag\/v([\d\.]+)$",
                resp.geturl(),
            )
            if remote_match:
                latest_version = version.parse(remote_match.group(1))
                logging.debug("latest_version={0}".format(latest_version))
                if calibre_version >= latest_version:
                    logging.info(
                        f"calibre {calibre_version} is already installed",
                    )
                    sys.exit(0)
            else:
                logging.warning(
                    f"Remote version '{resp.geturl()}' did not match regexp",
                )
        else:
            logging.warning(
                f"Local version '{proc.stdout.strip()}' did not match regexp",
            )
else:
    logging.warning(
        f"'{calibre_bin}' does not exist, assuming not installed",
    )

logging.info("Installing calibre {latest_version}")

from calibre import installer  # noqa: E402

installer.run_installer(
    install_dir=os.path.dirname(SHARE_DIR),
    isolated=True,
    bin_dir=BIN_DIR,
    share_dir=SHARE_DIR,
    version=str(latest_version) if latest_version else None,
)

_ = subprocess.call(
    [
        os.path.join(SHARE_DIR, "calibre_postinstall"),
        "--root",
        PREFIX_DIR,
        "--bindir",
        BIN_DIR,
        "--sharedir",
        SHARE_DIR,
    ]
)

if BIN_DIR.startswith(os.path.expanduser("~")):
    for desktop_file in glob.glob(
        os.path.join(PREFIX_DIR, "share", "applications", "calibre*.desktop")
    ):
        logging.info(f"Updating desktop file {desktop_file}")
        lines = []
        with open(desktop_file, "r") as f:
            for line in f:
                line = line.strip()
                if line.startswith("TryExec=") or line.startswith("Exec="):
                    key, value = line.split("=", 2)
                    elements = shlex.split(value)
                    calibre_bin = os.path.join(BIN_DIR, os.path.basename(elements[0]))
                    if os.path.exists(calibre_bin):
                        elements[0] = calibre_bin
                    lines.append(f"{key}={shlex.join(elements)}")
                else:
                    lines.append(line)
        with open(desktop_file, "w") as f:
            f.write("\n".join(lines))
