-- vim: set noexpandtab tabstop=2 shiftwidth=2 autoindent:
-- vim: set foldmarker=[[[,]]] foldmethod=marker foldlevel=0:
-- Do not edit this file directly! It is managed by chezmoi.

vim.lsp.handlers['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, {border = 'rounded'})
vim.lsp.handlers['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, {border = 'rounded'})

local function lsp_highlight_document(client)
	if client.server_capabilities.document_highlight then
		vim.api.nvim_create_augroup('lsp_document_highlight', {clear = true})
		vim.api.nvim_create_autocmd('CursorHold', {
			group = 'lsp_document_highlight',
			pattern = '<buffer>',
			callback = vim.lsp.buf.document_highlight,
		})
		vim.api.nvim_create_autocmd('CursorMoved', {
			group = 'lsp_document_highlight',
			pattern = '<buffer>',
			callback = vim.lsp.buf.clear_references,
		})
	end
end

local capabilities = vim.lsp.protocol.make_client_capabilities()

local M = {}

local has_cmp_lsp, cmp_lsp = pcall(require, 'cmp_nvim_lsp')
if has_cmp_lsp then
	capabilities = cmp_lsp.default_capabilities(capabilities)
end

M.capabilities = capabilities
M.capabilities.textDocument.completion.completionItem.documentationFormat = {'markdown', 'plaintext'}
M.capabilities.textDocument.completion.completionItem.snippetSupport = true
M.capabilities.textDocument.completion.completionItem.preselectSupport = true
M.capabilities.textDocument.completion.completionItem.insertReplaceSupport = true
M.capabilities.textDocument.completion.completionItem.labelDetailsSupport = true
M.capabilities.textDocument.completion.completionItem.deprecatedSupport = true
M.capabilities.textDocument.completion.completionItem.commitCharactersSupport = true
M.capabilities.textDocument.completion.completionItem.tagSupport = {valueSet = {1}}
M.capabilities.textDocument.completion.completionItem.resolveSupport = {
	properties = {
		'documentation',
		'detail',
		'additionalTextEdits',
	},
}

M.capabilities.textDocument.foldingRange = {
	dynamicRegistration = false,
	lineFoldingOnly = true,
}

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
M.on_attach = function(client, bufnr)
	local function buf_set_keymap(mode, key, cmd, options)
		local opts = options and options or {}
		opts['buffer'] = bufnr
		vim.keymap.set(mode, key, cmd, opts)
	end

	-- Mappings.
	-- See `:help vim.lsp.*` for documentation on any of the below functions
	buf_set_keymap('n', 'gD', vim.lsp.buf.declaration)
	buf_set_keymap('n', 'gd', vim.lsp.buf.definition)
	buf_set_keymap('n', 'K', vim.lsp.buf.hover)
	buf_set_keymap('n', 'gi', vim.lsp.buf.implementation)
	buf_set_keymap('n', '<C-k>', vim.lsp.buf.signature_help)
	buf_set_keymap('n', '<space>wa', vim.lsp.buf.add_workspace_folder)
	buf_set_keymap('n', '<space>wr', vim.lsp.buf.remove_workspace_folder)
	--buf_set_keymap('n', '<space>wl', print(vim.inspect(vim.lsp.buf.list_workspace_folders())))
	buf_set_keymap('n', '<space>D', vim.lsp.buf.type_definition)
	buf_set_keymap('n', '<space>rn', vim.lsp.buf.rename)
	buf_set_keymap('n', '<space>ca', vim.lsp.buf.code_action)
	buf_set_keymap('n', 'gr', vim.lsp.buf.references)
	buf_set_keymap('n', '<space>e', vim.diagnostic.open_float)
	buf_set_keymap('n', '[d', vim.diagnostic.goto_prev)
	buf_set_keymap('n', ']d', vim.diagnostic.goto_next)
	buf_set_keymap('n', '<space>q', vim.diagnostic.setloclist)
	buf_set_keymap('n', '<space>f', function() vim.lsp.buf.format({async = true}) end)
	vim.api.nvim_create_user_command('Format', vim.lsp.buf.format, {desc = 'Format file with LSP'})

	if client.server_capabilities.document_formatting then
		vim.api.nvim_create_augroup('format_on_save', {clear = true})
		vim.api.nvim_create_autocmd('BufWritePre', {
			desc = 'Auto format before save',
			group = 'format_on_save',
			pattern = '<buffer>',
			callback = function()
				vim.lsp.buf.format()
			end,
		})
	end

	lsp_highlight_document(client)
end

return M
