-- Do not edit this file directly! It is managed by chezmoi.

local Utils = require('utils')

-- Utility functions for working around limitations in snacks.nvim
local M = {}

---@param win integer?
---@return integer
function M.pick_window(win)
	local current_wid = win or vim.api.nvim_get_current_win()

	-- If we have snacks.nvim, it's available as Snacks
	local HasSnacks, _ = pcall(require, 'snacks.picker.util')
	if not HasSnacks then
		return current_wid
	end

	local wid = Snacks.picker.util.pick_win({
		main = current_wid,
		filter = function(_, buf)
			if vim.bo[buf].filetype:find('^snacks') then
				return false
			end

			if
				vim.tbl_contains(Utils.excluded_buftypes, vim.bo[buf].buftype)
				or vim.tbl_contains(Utils.excluded_filetypes, vim.bo[buf].filetype)
			then
				return false
			end

			return true
		end,
	}) or current_wid

	return wid
end

-- This is a pretty blatant copy of snacks.explorer.actions.actions.confirm. The only difference is
-- that this function will call pick_win() before calling jump().
---@param picker snacks.Picker
---@param item? snacks.picker.Item
---@param action? snacks.picker.Action
---@return (boolean|string)?
function M.explorer_confirm(picker, item, action)
	if not item then
		return
	elseif picker.input.filter.meta.searching then
		require('snacks.explorer.actions').update(picker, { target = item.file })
	elseif item.dir then
		require('snacks.explorer.tree'):toggle(item.file)
		require('snacks.explorer.actions').update(picker, { refresh = true })
	else
		-- This section is a pretty blatant copy of snacks.picker.actions.pick_win(). The major difference here is that
		-- `M.pick_window()` uses a custom filter function to exclude more buftypes and filetypes.
		if not picker.layout.split then
			picker.layout:hide()
		end

		local win = M.pick_window(picker.main)
		picker.main = win

		if not picker.layout.split then
			vim.defer_fn(function()
				if not picker.closed then
					picker.layout:unhide()
				end
			end, 100)
		end
		Snacks.picker.actions.jump(picker, item, action)
	end
end

return M
