-- Do not edit this file directly! It is managed by chezmoi.

local Utils = require('utils')

-- Utility functions for working around limitations in snacks.nvim
local M = {}

-- This is a pretty blatant copy of snacks.picker.actions.pick_win. The only difference is this function will call
-- Snacks.picker.util.pick_win() with a filter function to exclude some buffer types.
---@param picker snacks.Picker
---@param item? snacks.picker.Item
---@param action? snacks.picker.Action
---@return (boolean|string)?
function M.pick_win(picker, item, action)
	if not picker.layout.split then
		picker.layout:hide()
	end

	local win = Snacks.picker.util.pick_win({
		main = picker.main,
		filter = function(_, buf)
			if vim.bo[buf].filetype:find('^snacks') then
				return false
			end

			for _, buftype in ipairs(Utils.excluded_buftypes) do
				if vim.bo[buf].buftype == buftype then
					return false
				end
			end

			for _, filetype in ipairs(Utils.excluded_filetypes) do
				if vim.bo[buf].filetype == filetype then
					return false
				end
			end

			return true
		end,
	})
	if not win then
		if not picker.layout.split then
			picker.layout:unhide()
		end
		return true
	end

	picker.main = win

	if not picker.layout.split then
		vim.defer_fn(function()
			if not picker.closed then
				picker.layout:unhide()
			end
		end, 100)
	end
end

-- This is a pretty blatant copy of snacks.explorer.actions.actions.confirm. The only difference is
-- that this function will call pick_win() before calling jump().
---@param picker snacks.Picker
---@param item? snacks.picker.Item
---@param action? snacks.picker.Action
---@return (boolean|string)?
function M.explorer_confirm(picker, item, action)
	if not item then
		return
	elseif picker.input.filter.meta.searching then
		require('snacks.explorer.actions').update(picker, { target = item.file })
	elseif item.dir then
		require('snacks.explorer.tree'):toggle(item.file)
		require('snacks.explorer.actions').update(picker, { refresh = true })
	else
		M.pick_win(picker, item, action)
		Snacks.picker.actions.jump(picker, item, action)
	end
end

return M
