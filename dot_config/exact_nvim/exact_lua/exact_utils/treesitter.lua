-- Do not edit this file directly! It is managed by chezmoi.

local M = {}

---@param parsers string|string[]
function M.ensure_installed(parsers)
	local has_treesitter, TSInstall = pcall(require, 'nvim-treesitter.install')
	if not has_treesitter then
		return
	end

	TSInstall.ensure_installed(parsers)
end

---@param node_types string|string[]
---@return boolean
function M.node_is(node_types, node)
	if node == nil then
		node = vim.treesitter.get_node()
		if node == nil then
			return false
		end
	end

	---@type string[]
	local types = {}
	if type(node_types) == 'string' then
		types = { node_types }
	else
		types = node_types
	end

	return vim.tbl_contains(types, node:type())
end

---@param node_types string|string[]
---@return boolean
function M.node_or_parent_is(node_types, node)
	---@type string[]
	local types = {}
	if type(node_types) == 'string' then
		types = { node_types }
	else
		types = node_types
	end

	if node == nil then
		node = vim.treesitter.get_node()
		if node == nil then
			return false
		end
	end

	repeat
		if M.node_is(types, node) then
			return true
		end

		node = node:parent()
	until node == nil

	return false
end

---@param node_types string|string[]
function M.find_node_of_type(node_types, node)
	---@type string[]
	local types = {}
	if type(node_types) == 'string' then
		types = { node_types }
	else
		types = node_types
	end

	if node == nil then
		node = vim.treesitter.get_node()
		if node == nil then
			return nil
		end
	end

	repeat
		if M.node_is(types, node) then
			return node
		end

		node = node:parent()
	until node == nil

	return nil
end

return M
