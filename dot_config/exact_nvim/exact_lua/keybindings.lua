-- Do not edit this file directly! It is managed by chezmoi.

local M = {
	keybindings = {
		[''] = {
			q = { '<Nop>', { noremap = false } },

			-- Reflow paragraph
			Q = { 'gwap', { desc = 'Reflow paragraph' } },
		},
		c = {
			['<S-Enter>'] = function()
				require('noice').redirect(vim.fn.getcmdline())
			end,
			['w!!'] = 'w !sudo tee % >/dev/null',
		},
		i = {
			['<C-BS>'] = '<Esc>cvb',
			['<S-Tab>'] = { '<ESC><<a', { silent = false } },

			['<C-n>'] = '<Plug>luasnip-next-choice',
			['<C-p>'] = '<Plug>luasnip-prev-choice',

			-- Add undo breakpoints
			[','] = ',<C-g>u',
			['.'] = '.<C-g>u',
			[';'] = ';<C-g>u',
			['('] = '(<C-g>u',
			[')'] = ')<C-g>u',
		},
		n = {
			-- BEGIN single-key mappings
			-- <F8> is defined in plugins/specs/global/aerial.lua to allow
			-- lazy-loading by keypress

			[';'] = function() require('telescope.builtin').resume() end,

			-- Allow ^ to act like Home in an IDE
			['^'] = { [[col('.') == match(getline('.'), '\S')+1 ? '0' : '^']], { expr = true } },

			-- Resize splits
			['<C-Up>'] = ':resize +2<CR>',
			['<C-Down>'] = ':resize -2<CR>',
			['<C-Left>'] = ':vertical resize -2<CR>',
			['<C-Right>'] = ':vertical resize +2<CR>',

			['<C-c>'] = function() require('FTerm').toggle() end,

			-- Keep the cursor in the middle of the screen with <C-d> and <C-u>
			['<C-d>'] = '<C-d>zz',
			['<C-u>'] = '<C-u>zz',

			-- Move between tabs
			['<C-S-Right>'] = ':tabnext<CR>',
			['<C-S-Left>'] = ':tabprev<CR>',

			-- Move between buffers
			['<S-h>'] = ':bprevious<CR>',
			['<S-l>'] = ':bnext<CR>',

			-- Normal movement between wrapped lines
			k = { [[v:count == 0 ? 'gk' : 'k']], { expr = true } },
			['<up>'] = { [[v:count == 0 ? 'gk' : 'k']], { expr = true } },
			j = { [[v:count == 0 ? 'gj' : 'j']], { expr = true } },
			['<down>'] = { [[v:count == 0 ? 'gj' : 'j']], { expr = true } },

			-- Mark z, join [count] lines, jump back to mark z
			J = 'mzJ`z',

			-- Going to the next/previous match will centre the line it's on
			n = { [['Nn'[v:searchforward]|zzzv]], { expr = true } },
			N = { [['nN'[v:searchforward]|zzzv]], { expr = true } },
			-- END single-key mappings

			-- Buffer keymaps
			-- Telescope buffers
			['<Leader>bf'] = { function() require('telescope.builtin').buffers() end, { desc = 'Telescope buffer selector' } },
			-- Buffer movement
			['[b'] = { ':bprevious<CR>', { desc = 'Previous buffer' } },
			[']b'] = { ':bnext<CR>', { desc = 'Next buffer' } },
			-- Delete buffers
			['<Leader>bdh'] = {
				function() require('close_buffers').delete({ type = 'hidden' }) end,
				{ desc = 'Delete hidden buffers', },
			},

			-- Code mappings
			['<Leader>ca'] = {
				function()
					local has_actions_preview, ActionsPreview = pcall(require, 'actions-preview')
					if has_actions_preview then
						ActionsPreview.code_actions()
					end
				end,
				{ desc = 'Preview code actions' }
			},

			-- Editing mappings
			['<Leader>ecb'] = { ':EditCodeBlock', { desc = 'Edit Code Block' } },

			-- File keymaps
			-- Allow gf to open files that don't exist
			gf = { ':edit <cfile><CR>', { desc = 'Go to file' } },
			['<Leader>fb'] = {
				function()
					local has_file_browser, TelescopeFileBrowser = pcall(require, 'telescope._extensions.file_browser.picker')
					if has_file_browser then
						TelescopeFileBrowser({
							path = '%:p:h',
						})
					end
				end,
				{ desc = 'File browser' }
			},
			['<Leader>fc'] = { ':Neotree reveal_force_cwd toggle<CR>', { desc = 'NeoTree Toggle' } },
			['<Leader>ff'] = {
				function()
					require('telescope.builtin').find_files({
						cwd = '%:p:h',
					})
				end,
				{ desc = 'Find files' }
			},
			['<Leader>ft'] = { ':Neotree reveal_force_cwd<CR>', { desc = 'Open NeoTree' } },

			-- Location window shortcuts
			['<Leader>ln'] = { ':lnext<CR>zz', { desc = 'Next location window entry' } },
			['<Leader>lp'] = { ':lprevious<CR>zz', { desc = 'Previous location window entry' } },
			['<Leader>lc'] = { ':lclose<CR>', { desc = 'Close location window' } },

			-- Quickfix window shortcuts
			['<Leader>qn'] = { ':cnext<CR>zz', { desc = 'Next quickfix entry' } },
			['<Leader>qp'] = { ':cprevious<CR>zz', { desc = 'Previous quickfix entry' } },
			['<Leader>qc'] = { ':cclose<CR>', { desc = 'Close quickfix window' } },

			-- Window keymaps
			-- Select window to jump to
			-- <Leader>w is defined in lua/plugins/specs/global/window-picker.lua
			-- to allow lazy-loading the plugin
			['<Leader>wcf'] = {
				function() require('utils').close_floating_windows() end,
				{ desc = 'Close floating windows' }
			},
			-- Normalize split size
			['<Leader>='] = '<C-w>=',

			-- Trouble.nivm keymaps
			['<Leader>xd'] = { ':TroubleToggle document_diagnostics<CR>', { desc = 'Trouble document diagnostics' } },
			['<Leader>xl'] = { ':TroubleToggle loclist<CR>', { desc = 'Trouble loclist' } },
			['<Leader>xq'] = { ':TroubleToggle quickfix<CR>', { desc = 'Trouble quickfix' } },
			['<Leader>xR'] = { ':TroubleToggle lsp_references<CR>', { desc = 'Trouble LSP References' } },
			['<Leader>xw'] = { ':TroubleToggle workspace_diagnostics<CR>', { desc = 'Trouble workspace diagnostics' } },
			['<Leader>xx'] = { ':TroubleToggle<CR>', { desc = 'Toggle Trouble.nvim' } },
			-- LSP references in Trouble
			gR = { ':TroubleToggle lsp_references<CR>', { desc = 'Trouble LSP References' } },

			-- Misc keymaps
			-- Clear search highlights
			['//'] = ':nohlsearch<CR>',
			['<Leader>rs'] = {
				':nohlsearch<CR>:diffupdate<CR>:syntax sync fromstart<CR>:redraw!<CR>',
				{ desc = 'Refresh screen' }
			},
			-- Find merge conflict markers
			['<Leader>mc'] = { '/\\v^[<\\|=>]{7}( .*\\|$)<CR>', { desc = 'Merge conflict marker search' } },
			-- Search/replace word under cursor
			['<Leader>s'] = {
				[[:%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]],
				{ desc = 'Search/Replace word under cursor' }
			},
			-- Mark a word as rare
			['z?'] = ':execute ":spellrare " .. expand("<cWORD>")<CR>',

			-- TO SORT
			['<Leader>cd'] = { vim.diagnostic.open_float, { desc = 'Open diagnostic float' } },
			-- Toggle cursorcolumn (useful for aligning text)
			['<Leader>cl'] = { ':<C-U>call utils#ToggleCursorColumn()<CR>', { desc = 'Toggle cursor column' } },
			-- Delete to the void register
			['<Leader>d'] = { '"_d', { desc = 'Delete to void register' } },
		},
		t = {
			['<C-t>'] = '<C-\\><C-n>:lua require("FTerm").toggle()<CR>',
		},
		v = {
			-- BEGIN Single-key mappings
			-- Better indentation
			['<'] = '<gv',
			['>'] = '>gv',

			-- Reflow selection
			Q = 'gq',

			-- Allow moving selected lines up and down
			J = ":m '>+1<CR>gv==kgvo<Esc>=kgvo",
			K = ":m '<-2<CR>gv==jgvo<Esc>=jgvo",

			-- Don't jump the cursor back where it was after yanking
			y = 'ygv<Esc>',
			-- END single-key mappings

			-- Delete to the void register
			['<Leader>d'] = '"_d',
		},
		x = {
			-- Delete highlighted text and paste over without copying it to the paste
			-- register
			['<Leader>p'] = '"_dP',
		},
	},
}

function M.setup()
	local utils = require('utils')
	for mode, mapppings in pairs(M.keybindings) do
		for key, value in pairs(mapppings) do
			if type(value) == 'table' then
				utils.set_keymap(mode, key, value[1], value[2])
			else
				utils.set_keymap(mode, key, value)
			end
		end
	end
end

function M.apply(mode, key, val, opts)
	require('utils').set_keymap(mode, key, val, opts or {})
end

return M
