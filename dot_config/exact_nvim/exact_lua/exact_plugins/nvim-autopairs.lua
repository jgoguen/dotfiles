-- Do not edit this file directly! It is managed by chezmoi.

local M = {
	{ 'echasnovski/mini.pairs', enabled = false },
	{
		'windwp/nvim-autopairs',
		opts = {
			check_ts = true,
			ts_config = {
				java = false,
			},
			fast_wrap = {
				map = '<M-e>',
				chars = { '{', '[', '(', '"', "'" },
				pattern = string.gsub([[ [%'%"%)%>%]%)%}%,] ]], '%s+', ''),
				offset = 0,
				end_key = '$',
				keys = 'qwertyuiopzxcvbnmasdfghjkl',
				check_comma = true,
				highlight = 'PmenuSel',
				highlight_grey = 'LineNr',
			},
		},
		config = function(_, opts)
			local Autopairs = require('nvim-autopairs')
			local AutopairCmp = require('nvim-autopairs.completion.cmp')
			local AutopairRule = require('nvim-autopairs.rule')
			local AutopairCond = require('nvim-autopairs.conds')
			local AutopairHandlers = require('nvim-autopairs.completion.handlers')
			local TSUtils = require('utils.treesitter')
			Autopairs.setup(opts)

			for _, p in ipairs({ ',', ';' }) do
				Autopairs.add_rules({
					-- Move past comma and semi-colon
					AutopairRule('', p)
						:with_move(function(rule_opts)
							return rule_opts.char == p
						end)
						:with_pair(function()
							return false
						end)
						:with_del(function()
							return false
						end)
						:with_cr(function()
							return false
						end)
						:use_key(p),
				})
			end

			Autopairs.add_rules({
				-- Add space before equals
				AutopairRule('=', '')
					:with_pair(AutopairCond.not_inside_quote())
					:with_pair(AutopairCond.not_filetypes({
						'conf',
						'html',
						'sh',
						'snippets',
						'TelescopePrompt',
						'template',
						'tmux',
						'vim',
						'xhtml',
						'xml',
						'zsh',
					}))
					:with_pair(TSUtils.node_or_parent_is_not({
						'argument_list',
						'keyword_argument',
					}))
					:with_pair(function(rule_opts)
						local last_char = rule_opts.line:sub(rule_opts.col - 1, rule_opts.col - 1)
						if last_char:match('[%w%=%s]') then
							return true
						end
						return false
					end)
					:replace_endpair(function(rule_opts)
						local prev_chars = rule_opts.line:sub(rule_opts.col - 2, rule_opts.col - 1)
						local next_char = rule_opts.line:sub(rule_opts.col, rule_opts.col)
						next_char = next_char == ' ' and '' or ' '

						if prev_chars:match('%w$') then
							return '<BS> =' .. next_char
						end
						if prev_chars:match('%=$') then
							return next_char
						end
						if prev_chars:match('=') then
							return '<BS><BS>=' .. next_char
						end

						return ''
					end)
					:set_end_pair_length(0)
					:with_move(AutopairCond.none())
					:with_del(AutopairCond.none()),
				AutopairRule('<', '>')
					:with_pair(AutopairCond.before_regex('%a+'))
					---@diagnostic disable-next-line: redefined-local
					:with_move(function(opts)
						return opts.char == '>'
					end),
			})

			local HasCmp, Cmp = pcall(require, 'cmp')
			if HasCmp then
				Cmp.event:on(
					'confirm_done',
					AutopairCmp.on_confirm_done({
						filetypes = {
							['*'] = {
								['('] = {
									kind = {
										Cmp.lsp.CompletionItemKind.Function,
										Cmp.lsp.CompletionItemKind.Method,
									},
									handler = AutopairHandlers['*'],
								},
							},
							latex = false,
							tex = false,
						},
					})
				)
			end
		end,
	},
}

return M
