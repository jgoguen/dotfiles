-- Do not edit this file directly! It is managed by chezmoi.

local M = {}

function M.setup()
	local Utils = require('utils')

	-- Highlight on yank
	vim.api.nvim_create_autocmd(
		'TextYankPost',
		{
			group = Utils.augroup('text_yank_post'),
			callback = function()
				vim.highlight.on_yank()
			end,
		}
	)

	-- Handle terminal resizing
	vim.api.nvim_create_autocmd(
		'VimResized',
		{
			group = Utils.augroup('resizing'),
			callback = function()
				vim.cmd('tabdo wincmd =')
			end,
		}
	)

	-- Close when buffer is in the last open window
	vim.api.nvim_create_autocmd(
		'WinEnter',
		{
			group = Utils.augroup('last_window_close'),
			callback = function(ev)
				local autoclose_types = {
					'quickfix',
					'nofile',
					'trouble',
				}
				local win_count = vim.fn.winnr('$')
				if win_count > 1 then
					return
				end

				for _, buftype in ipairs(autoclose_types) do
					if buftype == vim.bo[ev.buf].buftype then
						vim.cmd('q')
						return
					end
				end
			end,
		}
	)

	-- Close certain filetypes with just 'q'
	vim.api.nvim_create_autocmd(
		'FileType',
		{
			group = Utils.augroup('close_with_q'),
			pattern = {
				'checkhealth',
				'help',
				'lspinfo',
				'man',
				'notify',
				'qf',
				'startuptime',
				'Trouble',
				'tsplayground',
			},
			callback = function(ev)
				vim.bo[ev.buf].buflisted = false
				Utils.set_keymap('n', 'q', ':close<CR>', { buffer = ev.buf })
			end,
		}
	)

	-- Strip trailing whitespace on save unless disabled
	vim.api.nvim_create_autocmd(
		'BufWritePre',
		{
			group = Utils.augroup('strip_trailing_whitespace'),
			callback = function(ev)
				if vim.b[ev.buf].skip_whitespace_strip then
					return
				end

				local viewdata = vim.fn.winsaveview()
				vim.api.nvim_exec(
					[[keepjumps keeppatterns silent! %s/\v\s+$//e]],
					false
				)
				vim.fn.winrestview(viewdata)
			end,
		}
	)
end

return M
