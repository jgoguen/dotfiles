-- vim: set noexpandtab tabstop=2 shiftwidth=2 autoindent:
-- vim: set foldmarker=[[[,]]] foldmethod=marker foldlevel=0:
-- Do not edit this file directly! It is managed by chezmoi.

local present, lspconfig = pcall(require, 'lspconfig')
if not present then
	return
end

local utils_present, lsputils = pcall(require, 'lsputils')
if not utils_present then
	return
end

local capabilities = lsputils.capabilities

-- Make custom servers discoverable
local runtime_path = vim.split(package.path, ";")
table.insert(runtime_path, "lua/?.lua")
table.insert(runtime_path, "lua/?/init.lua")

local servers = {
	"ansiblels",
	"bashls",
	"csharp_ls",
	"prosemd_lsp",
	"solargraph",
	"sumneko_lua",
	"texlab",
	"tsserver",
	"vimls",
	"yamlls",
}
local snippet_capablity_servers = { "cssls", "html", "jsonls" }

local lsp_settings = {
	ansiblels = {
		ansible = {
			python = {
				interpreterPath = "python3"
			},
		},
	},
	jsonls = {
		json = {
			schemas = require('schemastore').json.schemas(),
		},
	},
	prosemd_lsp = {
		filetypes = { "markdown", "pandoc.markdown" },
	},
	solargraph = {
		filetypes = { "ruby", "ruby.eruby.chef" },
	},
	sumneko_lua = {
		Lua = {
			IntelliSense = {
				traceLocalSet = true,
				traceReturn = true,
			},
			runtime = {
				version = "LuaJIT",
				path = runtime_path,
			},
			diagnostics = {
				globals = { "require", "vim" },
			},
			workspace = {
				-- Make the LSP aware of nvim runtime files
				library = vim.api.nvim_get_runtime_file("", true)
			},
			telemetry = {
				enable = false,
			},
		},
	},
	yamlls = {
		redhat = {
			telemetry = {
				enabled = false,
			},
		},
		yaml = {
			customTags = {
				"!include_dir_named",
				"!lambda scalar",
				"!secret scalar",
			},
			format = {
				printWidth = 120,
				singleQuote = true,
			},
		},
	},
}

for _, lsp in ipairs(servers) do
	local settings = lsp_settings[lsp] or lspconfig[lsp].settings
	lspconfig[lsp].setup({
		capabilities = capabilities,
		settings = settings,
		on_attach = lsputils.on_attach,
	})
end

capabilities.textDocument.completion.completionItem.snippetSupport = true
for _, lsp in ipairs(snippet_capablity_servers) do
	local settings = lsp_settings[lsp] or lspconfig[lsp].settings
	lspconfig[lsp].setup({
		capabilities = capabilities,
		settings = settings,
		on_attach = lsputils.on_attach,
	})
end
