" vim: set noexpandtab tabstop=2 shiftwidth=2 autoindent:
" vim: set foldmarker=[[[,]]] foldmethod=marker foldlevel=0:
" Do not edit this file directly! It is managed by chezmoi.

set encoding=utf-8
scriptencoding utf-8

" Mandatory initialization, modify with caution [[[
" Paths needed throughout the rest of the config [[[
let g:xdg_config_home = expand($XDG_CONFIG_HOME)
if g:xdg_config_home ==? ''
	let g:xdg_config_home = expand('~/.config')
endif

let g:xdg_data_home = expand($XDG_DATA_HOME)
if g:xdg_data_home ==? ''
	let g:xdg_data_home = expand('~/.local/share')
endif

let s:vimrc = printf('%s/init.vim', stdpath('config'))
let s:vimsettings = printf('%s/settings', stdpath('config'))
let s:autoload_dir = printf('%s/autoload', stdpath('config'))

let s:plugsettings = printf('%s/plugins', s:vimsettings)
let s:presettings = printf('%s/pre', s:vimsettings)
let s:postsettings = printf('%s/post', s:vimsettings)
let s:vimplug_file = printf('%s/plug.vim', s:autoload_dir)
let s:plugin_home = printf('%s/plugins', stdpath('data'))
" ]]]

" Install vim-plug if it isn't present [[[
if empty(glob(s:vimplug_file))
	call utils#FetchRemoteFile('https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim', s:vimplug_file)
	execute printf('source %s', s:vimplug_file)
	augroup emptyplug
		autocmd!
		autocmd VimEnter * PlugInstall --sync | source s:vimrc
	augroup END
else
	augroup emptyplug
		autocmd!
	augroup END
endif
" ]]]

" Plugin setup [[[
if !isdirectory(s:plugin_home)
	call mkdir(s:plugin_home, 'p', 0700)
endif

call plug#begin(s:plugin_home)
" ]]]

" Early plugin installs [[[
" For various reasons, some plugins need to be initialized before anything else
" is set

" Syntax highlighting for chezmoi templates
Plug 'alker0/chezmoi.vim'
" ]]]

" Set options which must come first [[[
let g:mapleader = '`'
let g:maplocalleader = "\\"
" ]]]

" Turn off things we don't want loaded by default [[[
" Do not load default menus
let g:did_install_default_menus = 1

" Do not load netrw
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1

" Do not load tohtml.vim
let g:loaded_2html_plugin = 1

" Do not load zipPlugin.vim, gzip.vim and tarPlugin.vim
let g:loaded_zipPlugin = 1
let loaded_gzip = 1
let g:loaded_tarPlugin = 1

" Do not load tutor mode
let g:loaded_tutor_mode_plugin = 1
" ]]]

" Set the Python host providers. [[[
" This makes startup faster, see https://neovim.io/doc/user/provider.html
" Disable the Python2 provider
let g:loaded_python_provider = 1
" Skip the Python2 host provider check
let g:python_host_skip_check = 1

let g:python_version = 'python3'

let s:py3_venv_path = printf('%s/venv/bin/python3', stdpath('data'))
if filereadable(s:py3_venv_path)
	let g:python3_host_prog = s:py3_venv_path
elseif executable('python3')
	let g:python3_host_prog = resolve(exepath('python3'))
elseif executable('python')
	" DANGER WILL ROBINSON! This will cause problems if only Python 2 is
	" installed on a system. But if that's true these days, there's another
	" problem that needs solving instead.
	let g:python3_host_prog=resolve(exepath('python'))
else
	echoerr 'Python 3 could not be found'
endif
" ]]]

" Filetype and syntax basic settings [[[
" Order matters: make sure filetype comes before syntax
filetype plugin indent on
if (&t_Co > 2 || has('gui_running')) && !exists('syntax_on')
	syntax on
else
	syntax enable
endif
" ]]]
" ]]] End mandatory initializations

" Plugins [[[
" Options for plugin definitions:
" - branch/tag/commit: use the specific branch/tag/commit from the repo
" - rtp: subdirectory with vim plugin
" - dir: install plugin in a non-standard location
" - as: use a different name for the plugin
" - do: string or funcref to execute after updating the plugin (cwd: plugin dir)
" - on: on-demand loading: commands or <Plug> mappings
" - for: on-demand loading: filetypes
" - frozen: only update if explicitly asked

" Plugins to install [[[
" CSS/SCSS syntax
Plug 'cakebaker/scss-syntax.vim'
" CSS/SCSS extras [[[
" Proper CSS3 syntax highlighting
Plug 'hail2u/vim-css3-syntax'
" ]]]

" Format on close and similar for Golang
Plug 'crispgm/nvim-go'
" nvim-go requirements [[[
Plug 'nvim-lua/popup.nvim'
" ]]]

" TokyoNight color scheme
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }

" Pretty 'trouble' list
Plug 'folke/trouble.nvim'
" trouble.nvim requirements and extras [[[
Plug 'folke/lsp-colors.nvim'
Plug 'kyazdani42/nvim-web-devicons'
" ]]]

" Show key bindings
Plug 'folke/which-key.nvim'

" .editorconfig support for Neovim
Plug 'gpanders/editorconfig.nvim'

" Autoload template files
Plug 'jgoguen/tmpl.vim'

" null-ls to allow non-LSP sources to hook in to Neovim's native LSP setup
Plug 'jose-elias-alvarez/null-ls.nvim'
" null-ls requirements [[[
Plug 'nvim-lua/plenary.nvim'
" ]]]

" Material color theme
Plug 'kaicataldo/material.vim', { 'branch': 'main' }

" JSON with comments
Plug 'kevinoid/vim-jsonc'

" Show a lightbulb when there's a code action
Plug 'kosayoda/nvim-lightbulb'

" File tree viewer
Plug 'lambdalisue/fern.vim'
" Fern requirements [[[
Plug 'antoinemadec/FixCursorHold.nvim'
" Fern git status
Plug 'lambdalisue/fern-git-status.vim'
" netrw hijack
Plug 'lambdalisue/fern-hijack.vim'
" Reload all nodes
Plug 'LumaKernel/fern-mapping-reload-all.vim'
" Nerd Font support
Plug 'lambdalisue/nerdfont.vim'
" Render the Fern tree with Nerd Font support
Plug 'lambdalisue/fern-renderer-nerdfont.vim'
" ]]]

" Graphviz plugin
Plug 'liuchengxu/graphviz.vim'

" Visual indent guides in vim
Plug 'nathanaelkane/vim-indent-guides'

" Neovim LSP
Plug 'neovim/nvim-lspconfig'
" nvim-lspconfig extras [[[
Plug 'b0o/SchemaStore.nvim'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/vim-vsnip'
Plug 'rafamadriz/friendly-snippets'
" ]]]

" Floating terminal in neovim
Plug 'numToStr/FTerm.nvim'

" Neovim Tresitter
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Neovim telescope
Plug 'nvim-telescope/telescope.nvim'
" telescope.nvim extras [[[
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'nvim-telescope/telescope-symbols.nvim'
" ]]]

" Improved JavaScript syntax
Plug 'pangloss/vim-javascript'

" Ansible/Jinja syntax support
Plug 'pearofducks/ansible-vim'

" Provides Markdown support to vim
Plug 'plasticboy/vim-markdown'
" Markdown extras [[[
" Provides ways to line up text. Required for vim-markdown table formatting.
Plug 'godlygeek/tabular'

" Markdown preview plugin
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }

" Improved vim-markdown highlighting and conceal
Plug 'vim-pandoc/vim-pandoc-syntax'
" ]]]

" Provides shortcuts for commenting lines or blocks of text
Plug 'preservim/nerdcommenter'

" Show file classes/functions/variables/headings using ctags
"Plug 'preservim/tagbar'

Plug 'preservim/vimux'

" Floating notifications inside vim
Plug 'rcarriga/nvim-notify'

" vim conflict marker highlighting and handlinng
Plug 'rhysd/conflict-marker.vim'

" Add file type icons
Plug 'ryanoasis/vim-devicons'

" Code sidebar using lsp
Plug 'simrat39/symbols-outline.nvim'

" tmux.conf highlighting
Plug 'tmux-plugins/vim-tmux'

" Fancy but useful vim status bars
Plug 'vim-airline/vim-airline'
" vim-airline extras [[[
Plug 'vim-airline/vim-airline-themes'

" Required for showing the git branch in vim-airline
Plug 'tpope/vim-fugitive'
" ]]]

" Improved Python support
Plug 'vim-python/python-syntax'

" Easier window swapping
Plug 'wesQ3/vim-windowswap'

" Code actions popup
Plug 'weilbith/nvim-code-action-menu'

" Restore last edit position
Plug 'vladdoster/remember.nvim'
" ]]]

" End loading vim-plug plugins
call plug#end()

" Handle no plugins installed [[[
" If there's no plugins installed, install them and reload the config
if empty(glob(s:plugin_home, '*'))
	augroup pluginstall
		autocmd!
		autocmd VimEnter * PlugInstall --sync | source s:vimrc
	augroup END
else
	augroup pluginstall
		autocmd!
	augroup END
endif
" ]]]
" ]]]

" Order matters! Don't change this unless you know what you're doing!!
for s:dirname in [s:presettings, s:vimsettings, s:plugsettings, s:postsettings]
	for s:fpath in split(globpath(s:dirname, '*.vim'), '\n')
		execute printf('source %s', s:fpath)
	endfor
	for s:fpath in split(globpath(s:dirname, '*.lua'), '\n')
		execute printf('source %s', s:fpath)
	endfor
endfor

" Load any local customizations not suitable for being checked in
let s:local_vimrc = printf('%s/vim-local.vim', g:xdg_config_home)
if filereadable(s:local_vimrc)
	execute printf('source %s', s:local_vimrc)
endif

" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
