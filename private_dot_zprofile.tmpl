# vim: set filetype=zsh:
# Do not edit this file directly! It is managed by chezmoi.

# Set path first, so many other things depend on it
typeset -U path
for bindir in /bin /sbin /usr/bin /usr/sbin /System/Cryptexes/App/usr/bin /usr/local/bin /usr/local/sbin /var/lib/snapd/snap/bin /usr/local/go/bin /usr/local/nodejs/current/bin /Library/TeX/Distributions/Programs/texbin /opt/local/bin /opt/local/sbin /opt/homebrew/bin "${HOME}/.cargo/bin" "${HOME}/.dotnet/tools" "${HOME}/bin" "${HOME}/.local/bin"; do
	if [ -d "${bindir}" ]; then
		path=(${bindir} ${path})
	fi
done

# Add Go paths
{{ if eq .chezmoi.os "darwin" -}}
export GOPATH="${HOME}/Library/Application Support/go"
{{- else }}
export GOPATH="${HOME}/.local/share/go"
{{- end }}
while read -d ':' pathname; do
	if [ -n "${pathname}" ] && [ -d "${pathname}" ]; then
		path=(${pathname}/bin ${path})
	fi
done < <(printf '%s' "${GOPATH}")

export PATH

# Set XDG variables for UNIX apps on Darwin. Use Linux-standard paths because
# chezmoi can't deploy to a different location per OS.
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"

if [ ! -d "${XDG_CACHE_HOME}" ]; then
	/bin/mkdir -p "${XDG_CACHE_HOME}"
fi
if [ ! -d "${XDG_CONFIG_HOME}" ]; then
	/bin/mkdir -p "${XDG_CONFIG_HOME}"
fi
if [ ! -d "${XDG_DATA_HOME}" ]; then
	/bin/mkdir -p "${XDG_DATA_HOME}"
fi

{{ if eq .chezmoi.os "darwin" -}}
BREW_PREFIX=""
if command -v brew >/dev/null 2>&1; then
	BREW_PREFIX="$(brew --prefix)"
fi
export CLICOLOR=1
{{- end }}

if command -v clang >/dev/null 2>&1; then
	export CC=clang
fi

if command -v nvim >/dev/null 2>&1; then
	export EDITOR=nvim
elif command -v vim >/dev/null 2>&1; then
	export EDITOR=vim
else
	export EDITOR=vi
fi

export FZF_DEFAULT_OPTS=" \
	--height=~40% --layout=reverse --border --select-1 --exit-0 \
	--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
	--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
	--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
"

export GTK_IM_MODULE="ibus"
export HISTFILE="${HOME}/.cache/zsh_history"
export HISTSIZE=250000000

{{ if eq .chezmoi.os "darwin" -}}
export HOMEBREW_BUNDLE_NO_LOCK=1
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_GITHUB_API_TOKEN={{ (onepasswordItemFields "yaim2h545jdgdfvlepphtyql3i").homebrew.value | quote }}
export LSCOLORS=ExFxCxDxBxegedabagacad
{{- else }}
# LS_COLORS is exported by this
if command -v dircolors >/dev/null 2>&1; then
	if [ -r "${HOME}/.config/dircolors" ]; then
		eval "$(dircolors -b ${HOME}/.config/dircolors)"
	else
		eval "$(dircolors -b)"
	fi
fi
{{- end }}

export LG_CONFIG_FILE="${XDG_CONFIG_HOME}/lazygit/config.yml,${XDG_CONFIG_HOME}/lazygit/catppuccin-mocha-mauve.yaml"

export MAILCHECK=0
export PAGER="less -FRXd"
export PROMPT_RETURNCODE_PREFIX="%{$fg_bold[red]%}"
export RIPGREP_CONFIG_PATH="${XDG_CONFIG_HOME}/ripgrep.conf"
export QT_IM_MODULE="ibus"
export SAVEHIST=${HISTSIZE}

{{- if eq .chezmoi.os "linux" }}
export SNAP_USER_COMMON="${XDG_CONFIG_HOME}/snaps"
export SNAP_USER_DATA="${XDG_CONFIG_HOME}/snaps"

{{- if ne .environment "headless" }}
# Force 1Password CLI to use app integration
export OP_BIOMETRIC_UNLOCK_ENABLED=true
{{- end }}
{{- end }}

if command -v gpgconf >/dev/null 2>&1; then
	gpgconf --launch gpg-agent
	export GPG_AGENT_INFO="$(gpgconf --list-dirs agent-socket)"
fi

if [ -S "${HOME}/.1password/agent.sock" ]; then
	export SSH_AUTH_SOCK="${HOME}/.1password/agent.sock"
fi

export TEXMFCONFIG="${HOME}/.config/texlive"
export TEXMFHOME="${HOME}/.local/share/texlive/texmf"
export TEXMFVAR="${HOME}/.local/share/texlive/var"
export VCS_PROMPT_AHEAD="%{$fg_bold[magenta]%}↑"
export VCS_PROMPT_PREFIX=" $fg[white]‹ %{$fg_bold[yellow]%}"
export VCS_PROMPT_STAGED="%{$fg_bold[green]%}●"
export VCS_PROMPT_SUFFIX=" $fg_bold[white]›%{$reset_color%}"
export VCS_PROMPT_UNMERGED="%{$fg_bold[red]%}✕"
export VCS_PROMPT_UNSTAGED="%{$fg_bold[red]%}●"
export VCS_PROMPT_UNTRACKED="%{$fg_bold[white]%}●"
export VISUAL="${EDITOR:-vi}"
export XMODIFIERS="@im=ibus"
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)

{{- if eq .chezmoi.os "darwin" }}
if [ -n "${BREW_PREFIX}" ]; then
	export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR="${BREW_PREFIX}/share/zsh-syntax-highlighting/highlighters"
fi
{{- else }}
export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR="/usr/share/zsh-syntax-highlighting/highlighters"
{{- end }}

test ! -d "${TEXMFCONFIG}" && mkdir -p "${TEXMFCONFIG}"

if [ ! -d "${HOME}/.cache" ]; then
	mkdir "${HOME}/.cache"
	chmod 0700 "${HOME}/.cache"
fi
if [ ! -f "${HISTFILE}" ]; then
	touch "${HISTFILE}"
	chmod 0600 "${HISTFILE}"
fi

IFS=':' read -rA PATHNAME <<<"${GOPATH}"
for dname in "${PATHNAME[@]}"; do
	test ! -d "${dname}" && mkdir -p "${dname}"
done

NODE_PATH="${HOME}/.local/lib/node_modules:${NODE_PATH}"

MAN_BIN="$(command -v manpath)"
if command -v manpath >/dev/null 2>&1 && [ -z "${MANPATH}" ]; then
	MANPATH="${HOME}/.local/share/man:/opt/local/share/man:$(manpath)"
	export MANPATH
fi

MY_TTY=$(/usr/bin/tty)
if [ -n "${MY_TTY}" ]; then
	export GPG_TTY="${MY_TTY}"
fi

# Detect CPU count
CPU_COUNT=0
if command -v nproc >/dev/null 2>&1 ; then
	CPU_COUNT="$(nproc)"
elif sysctl -n hw.ncpu >/dev/null 2>&1 ; then
	CPU_COUNT="$(sysctl -n hw.ncpu)"
fi
if [ "${CPU_COUNT}" -gt 1 ]; then
	export MAKEFLAGS="-j$(( CPU_COUNT - 1 ))"
fi

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#909090,standout"

export LC_ALL="en_CA.UTF-8"
export LANG="en_CA.UTF-8"

if [ -f "${HOME}/.zprofile.local" ]; then
	. "${HOME}/.zprofile.local"
fi
